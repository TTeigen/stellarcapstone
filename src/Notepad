NASA APIs - {O5QOmAwQTzj3YbIlmcSg3lRnccfkdR0Y4XeQxIA9}
    * APOD - [https://api.nasa.gov/planetary/apod]
    * Img and vid library - [https://images-api.nasa.gov]
    * NEOWs - [https://api.nasa.gov/neo/rest/v1/]


r/SpaceX - [https://api.spacexdata.com/v3]

 <iframe src="http://server1.sky-map.org/skywindow?object=M100&zoom=8&img_source=SDSS" scrolling = 'yes' width='400' height='320'>
      </iframe>

SolarSystemOpenData - {}
    * allows for search by english name
    * works only for our solar system
    * load solar system seperately and use only this API?

WheretheISSat?
    * 25544 -ISS id
    * coords search
    * daynum

API chaining -> https://stackoverflow.com/questions/40981040/using-a-fetch-inside-another-fetch-in-javascript


import useState, useEffect


const [stateName, setstateName] = useState(defaultState)
defaultState can be any data type 


(ex.)


const methodOne = newValue => {
    setState(newValue)
}

onClick {{methodOne(this[null],argument)}}


componentDidMount ------> useEffect


useEffect(() ={
    fetch logic can go here
})

ex
{componentDidMount equivalent}
useEffect(() => {
    fetch('someUrl.co/api/suchandsuch')
        .then(response => {
            return response.json
        })
        .then(charData => {
            const selectedChars = charData.results.slice(0,5)
            setLoadedChars(
                 
            )
        })
},[props.selectedChars]) <---- arg here for DidUpdate equivalent (if empty, DidMount equiv)

componentWillUnMount equiv -> useEffect

useEffect(() => {
    method
    return () => {
        cleanUpMethod
    }
},[props.selectedChars]) unmount before update runs again


useEffect(() => {
    return () => {
        stuff
    }
},[]) -> Unmount component


React.memo == shouldUpdate

export default React.memo(component)





passing the hook

stuff hookFunction(() => props.callback)


//info for display for planets (isPlanet === true)

    aphelion={planet.aphelion} /farthest
    perihelion={planet.perihelion} /closest
    gravity={planet.gravity}
    mass={planet.mass}
    radius={planet.meanRadius}
    moons={planet.moons} [objects]

//info for moons (isPlanet===false)
    name = moon.id
    rel = moon.rel

//code to filter to major bodies
    const [isLoading, fetchedData] = useHttp(constants.ssodUrl, {})
    const solarSystem = fetchedData ? fetchedData.bodies.filter(x => constants.listFilter.includes(x.englishName)) : []

    (1024kg)